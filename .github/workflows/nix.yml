name: Nix

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/nix.yml'
      - 'nix/**'
      - 'flake.*'
      - 'secrets/**'
  pull_request:
    paths:
      - '.github/workflows/nix.yml'
      - 'nix/**'
      - 'flake.*'
      - 'secrets/**'

jobs:
  check:
    name: Check
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Install Nix
        id: install_nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34

      - name: Checkout
        id: checkout
        uses: LeastAuthority/checkout-nix-flake@90a34024508812fd64b012de7c97ff977e32bd46 # v1.0.1

      - name: Check Nix Flake
        id: check
        run: |
          nix flake show
          nix flake check

      - name: Set matrix
        id: set-matrix
        run: |
          # Extract some data about the systems in the flake, so we can build/deploy them in parallel using the matrix strategy
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
          # Get the json list of the nixosConfigurations using our custom lib from the flake
          output="matrix={\"include\":$(nix eval --json .#lib.nixosConfigurationsMatrix)}"
          # Print it for troubleshooting. It should look like:
          # `matrix={"include":[{"target":"<sys1>","hostname":"<host1>","domain":"<domain1>"}, ...]}`
          echo $output
          # Save it for the next job(s)
          echo $output >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    needs: check
    strategy:
      fail-fast: false
      # Consuming the matrix created above
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
    steps:
      - name: Install Nix
        id: install_nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34

      - name: Checkout
        id: checkout
        uses: LeastAuthority/checkout-nix-flake@90a34024508812fd64b012de7c97ff977e32bd46 # v1.0.1

      - name: Build nixosConfiguration for ${{ matrix.target }}
        id: check_target
        run: |
          nix build .#nixosConfigurations.${{ matrix.target }}.config.system.build.toplevel

  deploy:
    name: Deploy
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    needs: check
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
    concurrency:
      group: nix-deploy-${{ matrix.target }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Load ssh key in agent
        id: ssh_agent
        uses: LeastAuthority/ssh-agent-action@0dd06f345a84b49e021b9e254efe3a1faa95cc98 # v1.0.2
        with:
          private_key: ${{ secrets.BOT_CD_SSH_KEY }}

      - name: Deploy nixosConfiguration on ${{ matrix.target }}
        id: deploy_target
        run: |
          # Specifying the target revision we want to deploy
          target_rev=$(git log -n 1 --format='format:%H')
          echo "Target revision: ${target_rev}"
          echo -n "${target_rev}" | \
          ssh -T -F "nix/ssh_config" -o "UserKnownHostsFile=nix/known_hosts" "bot-cd@${{ matrix.hostname }}.${{ matrix.domain }}"
